angular 2- 
AngularJS is by far the most popular JavaScript framework available today for creating web applications. 
And now Angular 2 and TypeScript are bringing true object oriented web development to the mainstream, in a
 syntax that is strikingly close to Java 8.

According to Google engineering director Brad Green, 1.3 million developers use AngularJS and 300 thousand are already
 using the soon to be released Angular 2. After working with Angular 2 for the last 10 months I believe its 
impact on the JavaScript community will rival that of the Spring framework on Java.

In this article I’ll provide a high-level overview of the Angular 2 framework.

At the end of 2014 Google announced that Angular 2 would be a complete rewrite of AngularJS,
and they even created a new language “AtScript” that was meant to be used for writing Angular 2 applications.

But then Microsoft agreed to add support for decorators (a.k.a. annotations) to their TypeScript 
language (a strict superset of JavaScript), and so that emerged as the language for the development of the 
Angular 2 framework itself, and the recommended language for developing applications using the AngularJS framework.

You can also develop Angular 2 apps in JavaScript (both ECMAScript 5 and 6) and in Dart.

In addition, the Angular team integrated yet another Microsoft product - the RxJS library of reactive 
JavaScript extensions, into the Angular 2 framework.

Angular 2 is not an MVC framework, but rather a component-based framework.
 In Angular 2 an application is a tree of loosely coupled components.

For example, the screenshot below shows the landing page of a sample online auction application that 
was initially prototyped as a collection of Navbar, Search, Carousel, Product, and Footer components.

 The automatic rendering is done by binding the template to the array of components retrieved from the server.
 The title of each product is a link to the associated product detail page. Since we want to design the auction as
 a single page application (SPA), we don’t want to refresh the entire page to display product details. Let’s reuse 
the area currently occupied by the carousel and products, so it can also render product details while keeping the 
rest of the page unchanged. This task can be accomplished in a few easy steps:

    Use Angular’s router-outlet directive, which allows you to declare the area currently occupied by the carousel
 and products to be <router-outlet> so that it can vary the content based on the user’s navigation.
    Encapsulate Carousel and Product inside the Home component
    Create a new ProductDetail component
    Configure the Angular’s Router to show either the Home or ProductDetail component in the designated <router-outlet> area.

We’ve talked a lot about components, but we have not defined them. In TypeScript a component is simply a class annotated with @Component:

@Component({
The annotation @Component is used to define the component and associated metadata. In this example, the value of the selector property
 identifies the name of the HTML tag representing this component. The template property is a placeholder for the HTML (or other) markup.
Angular is a framework for building client applications in HTML and either JavaScript or a language like TypeScript that compiles to JavaScript.

The framework consists of several libraries, some of them core and some optional.

You write Angular applications by composing HTML templates with Angularized markup, writing component classes to manage those templates, adding application logic in services, and boxing components and services in modules.

Then you launch the app by bootstrapping the root module. Angular takes over, presenting your application content in a browser and responding to user interactions according to the instructions you've provided.

Of course, there is more to it than this. You'll learn the details in the pages that follow. For now, focus on the big picture.
overview

The architecture diagram identifies the eight main building blocks of an Angular application:

    Modules
    Components
    Templates
    Metadata
    Data binding
    Directives
    Services
    Dependency injection

Learn these building blocks, and you're on your way.

The code referenced on this page is available as a live example.
Modules
Component

Angular apps are modular and Angular has its own modularity system called Angular modules or NgModules.

Angular modules are a big deal. This page introduces modules; the Angular modules page covers them in depth.


Every Angular app has at least one Angular module class, the root module, conventionally named AppModule.

While the root module may be the only module in a small application, most apps have many more feature modules, each a cohesive block of code dedicated to an application domain, a workflow, or a closely related set of capabilities.

An Angular module, whether a root or feature, is a class with an @NgModule decorator.

Decorators are functions that modify JavaScript classes. Angular has many decorators that attach metadata to classes so that it knows what those classes mean and how they should work. Learn more about decorators on the web.

NgModule is a decorator function that takes a single metadata object whose properties describe the module. The most important properties are:

    declarations - the view classes that belong to this module. Angular has three kinds of view classes: components, directives, and pipes.

    exports - the subset of declarations that should be visible and usable in the component templates of other modules.

    imports - other modules whose exported classes are needed by component templates declared in this module.

    providers - creators of services that this module contributes to the global collection of services; they become accessible in all parts of the app.

    bootstrap - the main application view, called the root component, that hosts all other app views. Only the root module should set this bootstrap property.
